// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `fileBodys.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct FileBody {
    // message fields
    pub fileName: ::std::string::String,
    pub end: i32,
    pub data: ::std::vec::Vec<u8>,
    pub verCode: ::std::string::String,
    pub status: i32,
    pub fileLength: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FileBody {
    fn default() -> &'a FileBody {
        <FileBody as ::protobuf::Message>::default_instance()
    }
}

impl FileBody {
    pub fn new() -> FileBody {
        ::std::default::Default::default()
    }

    // string fileName = 1;


    pub fn get_fileName(&self) -> &str {
        &self.fileName
    }
    pub fn clear_fileName(&mut self) {
        self.fileName.clear();
    }

    // Param is passed by value, moved
    pub fn set_fileName(&mut self, v: ::std::string::String) {
        self.fileName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fileName(&mut self) -> &mut ::std::string::String {
        &mut self.fileName
    }

    // Take field
    pub fn take_fileName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fileName, ::std::string::String::new())
    }

    // sint32 end = 2;


    pub fn get_end(&self) -> i32 {
        self.end
    }
    pub fn clear_end(&mut self) {
        self.end = 0;
    }

    // Param is passed by value, moved
    pub fn set_end(&mut self, v: i32) {
        self.end = v;
    }

    // bytes data = 3;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // string verCode = 4;


    pub fn get_verCode(&self) -> &str {
        &self.verCode
    }
    pub fn clear_verCode(&mut self) {
        self.verCode.clear();
    }

    // Param is passed by value, moved
    pub fn set_verCode(&mut self, v: ::std::string::String) {
        self.verCode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_verCode(&mut self) -> &mut ::std::string::String {
        &mut self.verCode
    }

    // Take field
    pub fn take_verCode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.verCode, ::std::string::String::new())
    }

    // int32 status = 5;


    pub fn get_status(&self) -> i32 {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = 0;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: i32) {
        self.status = v;
    }

    // sint64 fileLength = 6;


    pub fn get_fileLength(&self) -> i64 {
        self.fileLength
    }
    pub fn clear_fileLength(&mut self) {
        self.fileLength = 0;
    }

    // Param is passed by value, moved
    pub fn set_fileLength(&mut self, v: i64) {
        self.fileLength = v;
    }
}

impl ::protobuf::Message for FileBody {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fileName)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.end = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.verCode)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.status = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.fileLength = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.fileName.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.fileName);
        }
        if self.end != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(2, self.end);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        if !self.verCode.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.verCode);
        }
        if self.status != 0 {
            my_size += ::protobuf::rt::value_size(5, self.status, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fileLength != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(6, self.fileLength);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.fileName.is_empty() {
            os.write_string(1, &self.fileName)?;
        }
        if self.end != 0 {
            os.write_sint32(2, self.end)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        if !self.verCode.is_empty() {
            os.write_string(4, &self.verCode)?;
        }
        if self.status != 0 {
            os.write_int32(5, self.status)?;
        }
        if self.fileLength != 0 {
            os.write_sint64(6, self.fileLength)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FileBody {
        FileBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fileName",
                |m: &FileBody| { &m.fileName },
                |m: &mut FileBody| { &mut m.fileName },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "end",
                |m: &FileBody| { &m.end },
                |m: &mut FileBody| { &mut m.end },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &FileBody| { &m.data },
                |m: &mut FileBody| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "verCode",
                |m: &FileBody| { &m.verCode },
                |m: &mut FileBody| { &mut m.verCode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "status",
                |m: &FileBody| { &m.status },
                |m: &mut FileBody| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "fileLength",
                |m: &FileBody| { &m.fileLength },
                |m: &mut FileBody| { &mut m.fileLength },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FileBody>(
                "FileBody",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FileBody {
        static instance: ::protobuf::rt::LazyV2<FileBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FileBody::new)
    }
}

impl ::protobuf::Clear for FileBody {
    fn clear(&mut self) {
        self.fileName.clear();
        self.end = 0;
        self.data.clear();
        self.verCode.clear();
        self.status = 0;
        self.fileLength = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FileBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FileBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ffileBodys.proto\"\x9e\x01\n\x08FileBody\x12\x1a\n\x08fileName\x18\
    \x01\x20\x01(\tR\x08fileName\x12\x10\n\x03end\x18\x02\x20\x01(\x11R\x03e\
    nd\x12\x12\n\x04data\x18\x03\x20\x01(\x0cR\x04data\x12\x18\n\x07verCode\
    \x18\x04\x20\x01(\tR\x07verCode\x12\x16\n\x06status\x18\x05\x20\x01(\x05\
    R\x06status\x12\x1e\n\nfileLength\x18\x06\x20\x01(\x12R\nfileLengthb\x06\
    proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
